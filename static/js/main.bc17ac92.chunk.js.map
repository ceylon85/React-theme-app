{"version":3,"sources":["logo.svg","theme/light.js","theme/dark.js","theme/components/Container.js","actions/config_action.js","actions/types.js","App.js","serviceWorker.js","reducers/index.js","reducers/config_reducer.js","index.js"],"names":["module","exports","colors","background","textColor","styled","div","props","theme","darkModeAction","variable","type","payload","App","dispatch","useDispatch","config","useSelector","state","useEffect","darkMode","window","localStorage","getItem","themeChange","value","setItem","light","dark","style","width","padding","backgroundColor","textAlign","onClick","Container","className","src","logo","alt","href","target","rel","Boolean","location","hostname","match","rootReduer","combineReducers","action","createStoreWithMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,kLCA5B,G,MAAA,CACXC,OAAQ,CACJC,WAAY,QACZC,UAAW,WCHJ,GACXF,OAAQ,CACJC,WAAY,QACZC,UAAW,U,kRCDJC,UAAOC,IAAtB,KACgB,SAACC,GAAD,OAAWA,EAAMC,MAAMN,OAAOC,cACnC,SAACI,GAAD,OAAWA,EAAMC,MAAMN,OAAOE,aCAlC,SAASK,EAAeC,GAC3B,MAAO,CACHC,KCNiB,YDOjBC,QAASF,G,WEkDFG,MA9Cf,WACE,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAWA,EAAMF,UAE5CG,qBAAU,WACHH,EAAOI,UACVN,EAASL,EAAeY,OAAOC,aAAaC,QAAQ,aAErD,CAACP,EAAOI,SAAUN,IAErB,IAAMU,EAAc,SAACC,GACnBJ,OAAOC,aAAaI,QAAQ,QAASD,GACrCX,EAASL,EAAegB,KAG1B,OACE,kBAAC,IAAD,CAAejB,MAA2B,UAApBQ,EAAOI,SAAuBO,EAAQC,GAC1D,yBACEC,MAAO,CACLC,MAAO,OACPC,QAAS,SACTC,gBAAiB,OACjBC,UAAW,WAGb,4BAAQC,QAAS,kBAAMV,EAAY,UAAnC,aACA,4BAAQU,QAAS,kBAAMV,EAAY,WAAnC,eAEF,kBAACW,EAAD,CAAWC,UAAU,cACnB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBChCYC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2D,kBCXSC,EAJIC,YAAgB,CACjChC,OCFa,WAA+B,IAArBE,EAAoB,uDAAZ,GAAI+B,EAAQ,uCAC3C,OAAQA,EAAOtC,MACb,IJJqB,YIKnB,OAAO,2BAAKO,GAAZ,IAAmBE,SAAU6B,EAAOrC,UACtC,QACE,OAAOM,M,yBCKPgC,EAA4BC,YAAgBC,IAAmBC,IAAnCF,CAA+CG,KAGjFC,IAASC,OACP,kBAAC,IAAD,CACEC,MAAOP,EACLQ,EACArC,OAAOsC,8BACLtC,OAAOsC,iCAGX,kBAAC,EAAD,OAGFC,SAASC,eAAe,SHyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc17ac92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\n    colors: {\n        background: \"white\",\n        textColor: \"black\",\n    }\n}","export default {\n    colors: {\n        background: \"black\",\n        textColor: \"white\",\n    }\n}","import styled from \"styled-components\";\n\nexport default styled.div`\n  background: ${(props) => props.theme.colors.background};\n  color: ${(props) => props.theme.colors.textColor};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n`;\n","import { \n    DARK_MODE\n} from './types';\n\nexport function darkModeAction(variable) {\n    return { \n        type: DARK_MODE,\n        payload: variable\n    }\n}","export const DARK_MODE = 'dark_mode';","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport light from \"./theme/light\";\nimport dark from \"./theme/dark\";\nimport Container from \"./theme/components/Container\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkModeAction } from \"./actions/config_action\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const config = useSelector((state) => state.config);\n\n  useEffect(() => {\n    if (!config.darkMode) {\n      dispatch(darkModeAction(window.localStorage.getItem(\"theme\")));\n    }\n  }, [config.darkMode, dispatch]);\n\n  const themeChange = (value) => {\n    window.localStorage.setItem('theme', value)\n    dispatch(darkModeAction(value))\n  }\n\n  return (\n    <ThemeProvider theme={config.darkMode === \"light\" ? light : dark}>\n      <nav\n        style={{\n          width: \"100%\",\n          padding: \"2rem 0\",\n          backgroundColor: \"gray\",\n          textAlign: \"center\",\n        }}\n      >\n        <button onClick={() => themeChange('dark')}>Dark Mode</button>\n        <button onClick={() => themeChange('light')}>Light Mode</button>\n      </nav>\n      <Container className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport config from \"./config_reducer\";\n\nconst rootReduer = combineReducers({\n  config,\n});\n\nexport default rootReduer;\n","import { DARK_MODE } from \"../actions/types\";\n\nexport default function (state = {}, action) {\n  switch (action.type) {\n    case DARK_MODE:\n      return { ...state, darkMode: action.payload };\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Reducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport promiseMiddleware from \"redux-promise\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst createStoreWithMiddleware = applyMiddleware(promiseMiddleware, ReduxThunk)(createStore);\n\n\nReactDOM.render(\n  <Provider\n    store={createStoreWithMiddleware(\n      Reducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n    )}\n  >\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}